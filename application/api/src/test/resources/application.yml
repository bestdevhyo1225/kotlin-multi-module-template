spring:
  profiles:
    active: test

  datasource:
    hikari:
      driver-class-name: org.h2.Driver
      jdbc-url: jdbc:h2:mem:test
      username: sa

  jpa:
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        show_sql: false
        highlight_sql: true # SQL 출력을 ANSI escape codes를 사용하여 색을 부여한다.
        default_batch_fetch_size: 200 # MySQL의 eq_range_index_dive_limit 값과 동일하게 설정
        query:
          plan_cache_max_size: 1024 # 쿼리 계획 캐시의 최대 갯수 (Default 값은 2048)
          plan_parameter_metadata_max_size: 64 # Native Query ParameterMetadata 최대 갯수 (Default 값은 128)
          in_clause_parameter_padding: true # Where In절 Padding Cache 사용
    open-in-view: false

  redis:
    host: localhost
    port: 6379

  kafka:
    producer:
      bootstrap-servers: localhost:19092,localhost:19093,localhost:19094
      acks: 1
      buffer-memory: 33554432 # 33MB (default)
      compression-type: lz4
      retries: 0
      batch-size: 100000 # 100KB
      linger-ms: 50
      request-timeout-ms: 60000 # 60초
      delivery-timeout-ms: 120000 # 120초
      instance-id: kafak-producer
    topics:
      post-feed: post-feed-topic

  output:
    ansi:
      enabled: always

jwt:
  secret-key: kotlinMultiModuleTemplateBackendJsonWebToken
  expiration-time-ms: 3600000 # 1시간 (1000 * 60 * 60)
  refresh-expiration-time-ms: 604800000 # 7일 (1000 * 60 * 60 * 24 * 7)

logging:
  level:
    org:
      springframework:
        orm.jpa: debug
      hibernate:
        SQL: debug
        orm.jdbc.bind: trace # Spring Boot 3.x 이상 부터는 'orm.jdbc.bind' 를 사용해야 바인딩 된 쿼리 파라미터를 볼 수 있다.
    io.lettuce.core.protocol.CommandHandler: debug
